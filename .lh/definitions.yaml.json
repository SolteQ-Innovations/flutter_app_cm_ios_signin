{
    "sourceFile": "definitions.yaml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751447264804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751447264804,
            "name": "Commit-0",
            "content": "definitions:\n  environment:\n    groups:\n      - izydesk\n\n  scripts:\n    - &print_env\n      name: PRINT ENV\n      script: printenv\n\n    - &flutter_doctor\n      name: Check Flutter setup\n      script: flutter doctor\n\n    - &firebase_install\n      name: Install Firebase CLI\n      script: |\n        #!/bin/bash\n        \n        # Vérifier si Firebase CLI est déjà installé\n        if command -v firebase > /dev/null 2>&1; then\n            echo \"Firebase CLI est déjà installé.\"\n        else\n            # Installer Firebase CLI\n            echo \"Firebase CLI n'est pas installé. Installation en cours...\"\n            npm install -g firebase-tools\n            if [[ $? -ne 0 ]]; then\n                echo \"Error installing Firebase CLI\"\n                exit 1\n            fi\n            echo \"Firebase CLI installed\"\n        fi\n\n    - &firebase_auth\n      name: Check Firebase authentication\n      script: |\n        #!/bin/bash\n\n        echo $GOOGLE_APPLICATION_CREDENTIALS >> $GOOGLE_APPLICATION_CREDENTIALS_FILE_PATH\n\n        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS_FILE_PATH\n\n        echo \"GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS_FILE_PATH\" >> tempenv.sh\n        source tempenv.sh\n\n        # Check if Firebase token is valid\n        firebase projects:list\n        if [[ $? -ne 0 ]]; then\n            echo \"Firebase auth is invalid or has expired. Please fix.\"\n            exit 1\n        fi\n        echo \"Firebase auth is valid\"\n\n    - &firebase_project_creation\n      name: Create, if non-existent, the Firebase project\n      script: |\n        #!/bin/bash\n        \n        source tempenv.sh\n        \n        # Slugify the company name\n        customname_slugify=$(echo \"$DATA_appDisplayName\" | sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z)\n        \n        # Calculate the maximum possible length for customuid\n        max_customuid_length=$((29 - 11 - ${#customname_slugify}))\n        \n        # Extract the last N characters of customuid\n        customuid=$(echo \"$DATA_saasCompanyUuid\" | tail -c $max_customuid_length | tr A-Z a-z)\n        \n        # Generate project id\n        FIREBASE_PROJECT_NAME=\"izy-ter-cma-${customname_slugify}-${customuid}\"\n        \n        # Vérifier si le projet Firebase existe\n        PROJECT_EXISTS=$(firebase projects:list | grep -c $FIREBASE_PROJECT_NAME)\n        if [[ $PROJECT_EXISTS -eq 0 ]]; then\n            # Créer un projet Firebase\n            RESULT=$(firebase projects:create $FIREBASE_PROJECT_NAME --display-name \"$DATA_appDisplayName\" --organization $GCLOUD_ORGANIZATION_ID --debug)\n            SUCCESS=$(echo $RESULT | grep -c \"Your Firebase project is ready!\")\n            if [[ $SUCCESS -ne 1 ]]; then\n                echo \"Error creating Firebase project: $FIREBASE_PROJECT_NAME\"\n                echo \"output: $RESULT\"\n        \n                # Does it already exists?\n                PROJECT_EXISTS=$(firebase projects:list | grep -c $FIREBASE_PROJECT_NAME)\n                if [[ $PROJECT_EXISTS -eq 0 ]]; then\n                  echo \"Unable to fetch or create firebase project $FIREBASE_PROJECT_NAME. exiting..\"\n                  exit 1\n                else\n                  echo \"Firebase project fetched & obtained on 2nd try: $FIREBASE_PROJECT_NAME\"\n                fi\n            else\n              echo \"Firebase project created: $FIREBASE_PROJECT_NAME\"\n            fi\n        else\n            echo \"Firebase project already exists: $FIREBASE_PROJECT_NAME\"\n        fi\n        \n        echo \"FIREBASE_PROJECT_NAME=$FIREBASE_PROJECT_NAME\" >> tempenv.sh\n\n    - &firebase_messaging_setup\n      name: Enable and setup Firebase Cloud Messaging\n      script: |\n        #!/bin/bash\n\n        source tempenv.sh\n\n        if [[ -z \"$FIREBASE_PROJECT_NAME\" ]]; then\n            echo \"Error: FIREBASE_PROJECT_NAME is not set after sourcing tempenv.sh\"\n            exit 1\n        else\n            echo \"Using Firebase project: $FIREBASE_PROJECT_NAME\"\n        fi\n\n        # Check if it's already setup.\n        payload='{\n          \"companyUuid\": \"'\"$DATA_saasCompanyUuid\"'\"\n        }'\n        echo \"Payload envoyé : $payload\"\n        statusCode=$(curl -s -o /dev/null -w \"%{http_code}\" --request POST \\\n          --url https://app-staging.izydesk-tertiaire.fr/get-firebase-credentials-customer-mobile-app-by-company-uuid \\\n          --header 'content-type: application/json' \\\n          --data \"$payload\"\n          )\n        if [[ $statusCode == 200 ]]; then\n          echo \"FCM already setup for this company, next step...\"\n          exit 0\n        elif [[ $statusCode == 404 ]]; then\n          echo \"Setting up Firebase Cloud Messaging...\"\n          statusCode=0\n        else\n          echo \"Error fetching Firebase service account key from SaaS backend, exiting...\"\n          echo \"statusCode: $statusCode\"\n          exit 1\n        fi\n\n        # Select the Firebase project\n        gcloud config set project $FIREBASE_PROJECT_NAME\n        if [[ $? -ne 0 ]]; then\n            echo \"Error selecting Firebase project: $FIREBASE_PROJECT_NAME\"\n            exit 1\n        fi\n\n        # Enable Firebase Cloud Messaging\n        gcloud services enable firebase.googleapis.com\n        if [[ $? -ne 0 ]]; then\n            echo \"Error enabling Firebase Cloud Messaging\"\n            exit 1\n        fi\n\n        SA_NAME=\"fcm-sa-sender\"\n\n        # Check if a service account already exists\n        SERVICE_ACCOUNT_EXISTS=$(gcloud iam service-accounts list --project $FIREBASE_PROJECT_NAME | grep -c $SA_NAME)\n        if [[ $SERVICE_ACCOUNT_EXISTS -eq 0 ]]; then\n            echo \"Service account $SA_NAME does not exist. Creating...\"\n\n          # Create a service account for Firebase Cloud Messaging\n          gcloud iam service-accounts create $SA_NAME --display-name \"Firebase Admin\" --project $FIREBASE_PROJECT_NAME\n\n          # Add the service account to the Firebase Admin role\n          gcloud projects add-iam-policy-binding $FIREBASE_PROJECT_NAME \\\n            --member serviceAccount:$SA_NAME@$FIREBASE_PROJECT_NAME.iam.gserviceaccount.com \\\n            --role roles/firebase.admin\n\n          # Add the service account to the Firebase Cloud Messaging Admin role\n          gcloud projects add-iam-policy-binding $FIREBASE_PROJECT_NAME \\\n            --member serviceAccount:$SA_NAME@$FIREBASE_PROJECT_NAME.iam.gserviceaccount.com \\\n            --role roles/firebasecloudmessaging.admin\n        fi\n\n        # Create a service account key\n        gcloud iam service-accounts keys create $SA_NAME-key.json \\\n          --iam-account $SA_NAME@$FIREBASE_PROJECT_NAME.iam.gserviceaccount.com \\\n          --project $FIREBASE_PROJECT_NAME\n        if [[ $? -ne 0 ]]; then\n            echo \"Error creating service account key\"\n            exit 1\n        else\n            echo \"Service account key created: $SA_NAME-key.json\"\n        fi\n\n        # Upload the service account key to SaaS backend\n        \n        payload='{\n          \"companyUuid\": \"'\"$DATA_saasCompanyUuid\"'\",\n          \"credentials\": '\"$(jq -c . < $SA_NAME-key.json)\"'\n        }'\n        echo \"Payload envoyé : $payload\"\n\n        statusCode=$(curl -s -o /dev/null -w \"%{http_code}\" --request POST \\\n          --url https://app-staging.izydesk-tertiaire.fr/set-firebase-credentials-customer-mobile-app \\\n          --header \"content-type: application/json\" \\\n          --data \"$payload\"\n        )\n        if [[ $statusCode -ne 200 ]]; then\n            echo \"Error uploading Firebase service account key to SaaS backend\"\n            echo \"statusCode: $statusCode // companyUuid: $DATA_saasCompanyUuid // $payload\"\n            exit 1\n        fi\n\n\n    - &enable_flutterfire\n      name: Enable/Install FlutterFire\n      script: |\n        #!/bin/bash\n\n        dart pub global activate flutterfire_cli\n        if [[ $? -ne 0 ]]; then\n          echo \"Error activating flutterfire\"\n          exit 1\n        fi\n\n        echo \"PATH=$PATH:$HOME/.pub-cache/bin\" >> tempenv.sh\n\n    - &generate_firebase_options\n      name: Generate firebase_options.dart with FlutterFire\n      script: |\n        #!/bin/bash\n\n        source tempenv.sh\n\n        if [[ -z \"$PLATFORM\" ]]; then\n          echo \"PLATFORM is not set. Default to android,ios\"\n          PLATFORM=\"android,ios\"\n        fi\n\n        if [[ \"$PLATFORM\" == \"android\" ]]; then\n          flutterfire configure --project $FIREBASE_PROJECT_NAME --platforms=android --android-package-name=$DATA_packageName --overwrite-firebase-options\n          if [[ $? -ne 0 ]]; then\n            echo \"Error running flutterfire configure\"\n            exit 1\n          fi\n        fi\n\n        if [[ \"$PLATFORM\" == \"ios\" ]]; then\n          flutterfire configure --project $FIREBASE_PROJECT_NAME --platforms=ios --ios-bundle-id=$DATA_packageName --overwrite-firebase-options\n          if [[ $? -ne 0 ]]; then\n            echo \"Error running flutterfire configure\"\n            exit 1\n          fi\n        fi\n\n        if [[ \"$PLATFORM\" == \"android,ios\" ]]; then\n          flutterfire configure --project $FIREBASE_PROJECT_NAME --platforms=android,ios  --android-package-name=$DATA_packageName --ios-bundle-id=$DATA_packageName --overwrite-firebase-options\n          if [[ $? -ne 0 ]]; then\n            echo \"Error running flutterfire configure\"\n            exit 1\n          fi\n        fi\n\n        echo \"lib/firebase_options.dart fileContent\"\n        echo \"---\"\n        echo \"$(<lib/firebase_options.dart)\"\n        echo \"---\"\n\n    - &generate_env_file\n      name: Generate assets/env/.env(.prod).local files\n      script: |\n        #!/bin/bash\n        \n        source tempenv.sh\n\n        # Génére le fichier .env.prod.local\n        fileContent=\"COMPANY_UUID=$DATA_saasCompanyUuid\\nCOMPANY_TYPE=$DATA_saasCompanyType\\nCOMPANY_NAME=$DATA_saasCompanyName\\nFIREBASE_APP_PROJECT_NAME=$FIREBASE_PROJECT_NAME\"\n        echo -e $fileContent > assets/env/.env.prod.local\n        if [[ $? -ne 0 ]]; then\n            echo \"Error generating assets/env/.env.prod.local file\"\n            exit 1\n        fi\n        \n        # Génére le fichier .env.local\n        fileContent=\"ENVIRONMENT=PROD\"\n        echo -e $fileContent > assets/env/.env.local\n        if [[ $? -ne 0 ]]; then\n            echo \"Error generating assets/env/.env.local file\"\n            exit 1\n        fi\n\n    - &move_images_assets\n      name: Move images assets from company subfolder to assets/images/company\n      script: |\n        #!/bin/bash\n\n        companyId=$DATA_saasCompanyUuid\n\n        echo \"Moving assets from assets/companies/$companyId ...\"\n\n        # Déplacer les images de assets/companies\n        mv assets/companies/$companyId/* assets/images/company\n        if [[ $? -ne 0 ]]; then\n            echo \"Error moving assets from assets/companies/$companyId\"\n            exit 1\n        fi\n        echo \"Successfully moved assets from assets/companies/$companyId\"\n\n    - &clean_up\n      name: Clean up\n      script: |\n        #!/bin/bash\n\n        flutter clean\n        if [[ $? -ne 0 ]]; then\n            echo \"Error cleaning Flutter project\"\n            exit 1\n        fi\n\n    - &build_launcher_icons\n      name: Build launcher icons\n      script: |\n        #!/bin/bash\n        \n        # Générer les icônes de lancement\n        dart run flutter_launcher_icons\n        if [[ $? -ne 0 ]]; then\n            echo \"Error generating launcher icons\"\n            exit 1\n        fi\n\n    - &install_flutter_dependencies\n      name: Install Flutter dependencies\n      script: |\n        #!/bin/bash\n        \n        # Installer les dépendances Flutter\n        flutter pub get\n        if [[ $? -ne 0 ]]; then\n            echo \"Error installing Flutter dependencies\"\n            exit 1\n        fi  \n        \n        #flutter packages pub get\n        #if [[ $? -ne 0 ]]; then\n            #echo \"Error installing Flutter dependencies\"\n            #exit 1\n        #fi\n\n        # Générer les fichiers nécessaires\n        flutter pub run build_runner build --delete-conflicting-outputs\n        if [[ $? -ne 0 ]]; then\n            echo \"Error generating files with build_runner\"\n            exit 1\n        fi\n\n        OUTPUT=$(flutter gen-l10n)\n        if [[ $? -ne 0 ]]; then\n            echo \"Error w/ flutter gen\"\n            echo \"output: $OUTPUT\"\n            exit 2\n        fi\n\nworkflows:\n  generate_builds:\n    name: Generate Builds\n    instance_type: linux_x2\n\n    triggering:\n      events:\n        - tag\n      branch_patterns:\n        - pattern: 'main'\n          include: true\n          source: true\n      tag_patterns:\n        - pattern: '*'\n          include: true\n\n    environment:\n      groups:\n        - izydesk\n\n    scripts:\n      - name: Read izydesk_apps.json and trigger builds\n        script: |\n          #!/bin/bash\n          \n          # Lire le fichier JSON et extraire la liste des applications\n          APPS=$(jq -c '.apps[]' izydesk_apps.json)\n          \n          if [[ $? -ne 0 ]]; then\n              echo \"Error reading JSON from izydesk_apps.json\"\n              exit 1\n          fi\n\n          # Compter le nombre d'applications\n          APP_COUNT=$(echo \"$APPS\" | wc -l)\n          echo \"Found $APP_COUNT apps in configuration.\"\n\n          # Boucle pour chaque application\n          echo \"$APPS\" | while IFS= read -r app; do\n            saasCompanyName=$(echo \"$app\" | jq -r '.saasCompanyName')\n            saasCompanyUuid=$(echo \"$app\" | jq -r '.saasCompanyUuid')\n            saasCompanyType=$(echo \"$app\" | jq -r '.saasCompanyType')\n            packageNameAndroid=$(echo \"$app\" | jq -r '.packageName')\n            packageNameIos=$(echo \"$app\" | jq -r '.packageName')\n            appDisplayName=$(echo \"$app\" | jq -r '.appDisplayName')\n            appStoreId=$(echo \"$app\" | jq -r '.appStoreAppId')\n\n            # Vérification si la clé \"overrideIosPackageName\" est présente et non nulle\n            overrideIosPackageName=$(echo \"$app\" | jq -r '.overrideIosPackageName // empty')\n            if [ -n \"$overrideIosPackageName\" ]; then\n                packageNameIos=\"$overrideIosPackageName\"\n            fi\n\n            #~ Check that all required fields are present\n            if [[ -z \"$saasCompanyName\" || -z \"$saasCompanyUuid\" || -z \"$saasCompanyType\" || -z \"$packageNameAndroid\" || -z \"$packageNameIos\" || -z \"$appDisplayName\" || -z \"$appStoreId\" ]]; then\n              echo \"APP: $app\"\n              echo \"Missing required fields for app. Skipping...\"\n              continue\n            fi\n\n\n            echo \"Triggering ANDROID build for $saasCompanyName...\"\n          \n            # Déclencher le workflow Android\n            curl -X POST \"https://api.codemagic.io/builds\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"x-auth-token: $CM_API_TOKEN\" \\\n            -d '{\n              \"appId\": \"'\"$COD_MAGIC_APP_ID\"'\",\n              \"workflowId\": \"build_android\",\n              \"branch\": \"main\",\n              \"environment\": {\n                \"variables\": {\n                  \"DATA_saasCompanyName\": \"'\"$saasCompanyName\"'\",\n                  \"DATA_saasCompanyUuid\": \"'\"$saasCompanyUuid\"'\",\n                  \"DATA_saasCompanyType\": \"'\"$saasCompanyType\"'\",\n                  \"DATA_packageName\": \"'\"$packageNameAndroid\"'\",\n                  \"DATA_appDisplayName\": \"'\"$appDisplayName\"'\"\n                }\n              }\n            }'\n\n            echo \"Triggering iOS build for $saasCompanyName...\"\n\n            # Déclencher le workflow iOS\n            curl -X POST \"https://api.codemagic.io/builds\" \\\n            -H \"Content-Type: application/json\" \\\n            -H \"x-auth-token: $CM_API_TOKEN\" \\\n            -d '{\n              \"appId\": \"'\"$COD_MAGIC_APP_ID\"'\",\n              \"workflowId\": \"build_ios\",\n              \"branch\": \"main\",\n              \"inputs\": {\n                \"bundleIdentifier\": \"'\"$packageNameIos\"'\"\n              },\n              \"environment\": {\n                \"variables\": {\n                  \"DATA_saasCompanyName\": \"'\"$saasCompanyName\"'\",\n                  \"DATA_saasCompanyUuid\": \"'\"$saasCompanyUuid\"'\",\n                  \"DATA_saasCompanyType\": \"'\"$saasCompanyType\"'\",\n                  \"DATA_packageName\": \"'\"$packageNameIos\"'\",\n                  \"DATA_appDisplayName\": \"'\"$appDisplayName\"'\",\n                  \"DATA_appStoreId\": \"'\"$appStoreId\"'\"\n                }\n              }\n            }'\n\n          done\n\n  build_android:\n    name: Triggered Android Build\n    instance_type: linux_x2\n\n    environment:\n      groups:\n        - izydesk\n\n      flutter: 3.27.3\n\n    scripts:\n      - name: Set platform in tempenv\n        script: echo \"PLATFORM=android\" >> tempenv.sh\n\n      - name: Google Play Version comparaison\n        script: |\n          # GPLAY_VERSION=$(google-play get-latest-version-code --package-name \"$PACKAGE_NAME\")\n          GPLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name \"$DATA_packageName\" --tracks=\"production\")\n\n          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f 1)\n          PUBSPEC_BUILD_NUMBER=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f 2)\n\n          if [[ $PUBSPEC_BUILD_NUMBER == $GPLAY_BUILD_NUMBER ]]; then\n              echo \"The version and build number in pubspec.yaml are the same as the latest on Google Play.\"\n              echo \"No need to build and release.\"\n              exit 2\n          elif [[ $PUBSPEC_BUILD_NUMBER < $GPLAY_BUILD_NUMBER ]]; then\n              echo \"The build number in pubspec.yaml is less than the latest on Google Play.\"\n              echo \"Cannot release an older build. Canceling the process.\"\n              exit 2\n          fi\n\n          echo \"PUBSPEC_VERSION=$PUBSPEC_VERSION\" >> tempenv.sh\n          echo \"PUBSPEC_BUILD_NUMBER=$PUBSPEC_BUILD_NUMBER\" >> tempenv.sh\n          \n          \n          echo \"The build number in pubspec.yaml is greater than the latest on Google Play.\"\n          echo \"Proceeding with configuration, build and deployment process.\"\n\n      - *flutter_doctor\n\n      - *firebase_install\n\n      - *firebase_auth\n\n      - name: Replace Android package name\n        script: |\n          #!/bin/bash\n          \n          # Récupérer le nom de package Android\n          PACKAGE_NAME=$(grep 'package=' android/app/src/main/AndroidManifest.xml | awk -F'\"' '{print $2}')\n          echo \"Current package name: $PACKAGE_NAME\"\n\n          # Remplacer le nom de package Android\n          if [[ $(uname) == \"Darwin\" ]]; then\n              sed -i '' \"s/$PACKAGE_NAME/$DATA_packageName/g\" android/app/src/main/AndroidManifest.xml\n          else\n              sed -i \"s/$PACKAGE_NAME/$DATA_packageName/g\" android/app/src/main/AndroidManifest.xml\n          fi\n          echo \"Package name replaced with $DATA_packageName\"\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$DATA_packageName\" android/app/src/main/AndroidManifest.xml\n          echo \":DEBUGGED\"\n\n      - name: Replace Android build name\n        script: |\n          #!/bin/bash\n\n          # Remplacer le nom de build Android dans le fichier build.gradle\n          BUILD_NAME=$(grep 'applicationId' android/app/build.gradle | awk -F'\"' '{print $2}')\n          echo \"Current build name: $BUILD_NAME\"\n\n          # Remplacer le nom de build Android\n          if [[ $(uname) == \"Darwin\" ]]; then\n              sed -i '' \"s/$BUILD_NAME/$DATA_packageName/g\" android/app/build.gradle\n          else\n              sed -i \"s/$BUILD_NAME/$DATA_packageName/g\" android/app/build.gradle\n          fi\n          echo \"Build name replaced with $DATA_packageName\"\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$DATA_packageName\" android/app/build.gradle\n          echo \":DEBUGGED\"\n\n      - name: Replace Android display name\n        script: |\n          #!/bin/bash\n          \n          # Remplacer le nom d'affichage de l'application Android dans le fichier AndroidManifest.xml\n          # appDisplayName == \"Izydesk\"\n\n          # Récupérer le nom d'affichage de l'application Android\n          APP_DISPLAY_NAME=$(grep 'android:label=' android/app/src/main/AndroidManifest.xml | awk -F'\"' '{print $2}')\n          echo \"Current app display name: $APP_DISPLAY_NAME\"\n\n          # Remplacer le nom d'affichage de l'application Android\n          if [[ $(uname) == \"Darwin\" ]]; then\n              sed -i '' \"s/$APP_DISPLAY_NAME/$DATA_appDisplayName/g\" android/app/src/main/AndroidManifest.xml\n          else\n              sed -i \"s/$APP_DISPLAY_NAME/$DATA_appDisplayName/g\" android/app/src/main/AndroidManifest.xml\n          fi\n          echo \"App display name replaced with $DATA_appDisplayName\"\n\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$DATA_appDisplayName\" android/app/src/main/AndroidManifest.xml\n          echo \":DEBUGGED\"\n\n      - name: Replace Android MainActivity.kt\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n\n          # Change android/app/src/main/kotlin/fr/izydesk/{folderName} to {packageName.split('.')[-1]}\n          lastPackagePart=\"${DATA_packageName##*.}\"\n\n          # Define the target directory\n          target_directory=\"android/app/src/main/kotlin/fr/izydesk/$lastPackagePart\"\n\n          # Check if the directory exists, if not, create it along with any necessary parent directories\n          if [ ! -d \"$target_directory\" ]; then\n            echo \"Directory $target_directory does not exist. Creating it now.\"\n            mkdir -p \"$target_directory\"\n            echo \"Directory $target_directory created.\"\n          else\n            echo \"Directory $target_directory already exists.\"\n          fi\n\n          # Define the path to the MainActivity.kt file\n          main_activity_file=\"$target_directory/MainActivity.kt\"\n\n          # Check if MainActivity.kt exists\n          if [ -f \"$main_activity_file\" ]; then\n            echo \"MainActivity.kt found, updating package name.\"\n\n            # Update the package name in MainActivity.kt\n            sed -i \"s/^package .*/package $DATA_packageName;/\" \"$main_activity_file\"\n\n            echo \"Package name updated to $DATA_packageName in $main_activity_file\"\n          else\n            echo \"MainActivity.kt not found in $target_directory. Creating...\"\n\n            # Create MainActivity.kt with the specified content\n            fileContent=\"package $DATA_packageName;\\n\\nimport io.flutter.embedding.android.FlutterFragmentActivity;\\n\\npublic class MainActivity extends FlutterFragmentActivity {}\\n\"\n            echo -e $fileContent > \"$main_activity_file\"\n\n            echo \"MainActivity.kt created in $target_directory\"\n          fi\n\n      - *firebase_project_creation\n\n      - *firebase_messaging_setup\n\n      - name: Add Android app to Firebase project\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n\n          # Vérifier si l'app Android existe\n          APP_EXISTS=$(firebase apps:list android --project $FIREBASE_PROJECT_NAME | grep -c \"$DATA_appDisplayName\")\n          if [[ $APP_EXISTS -eq 0 ]]; then\n              APP_EXISTS=$(firebase apps:list android --project $FIREBASE_PROJECT_NAME | grep -c \"izy_tertiaire_cma (android)\")\n              if [[ $APP_EXISTS -eq 0 ]]; then\n                  # Ajouter une application Android au projet Firebase\n                  RESULT=$(firebase apps:create android \"$DATA_appDisplayName\" --package-name $DATA_packageName \\\n                    --project $FIREBASE_PROJECT_NAME)\n                  SUCCESS=$(echo $RESULT | grep -i -c \"Your Firebase ANDROID App is ready!\")\n                  if [[ $SUCCESS -ne 1 ]]; then\n                      echo \"Error adding Android app to Firebase project: $FIREBASE_PROJECT_NAME\"\n                      echo \"output: $RESULT\"\n                      exit 1\n                  fi\n                  FIREBASE_ANDROID_APP_ID=$(echo $RESULT | awk -F 'App ID: ' '/App ID:/ {print $2}' | awk '{print $1}')\n                  echo \"Android app added to Firebase project: $FIREBASE_PROJECT_NAME\"\n                  echo \"Firebase Android App ID: $FIREBASE_ANDROID_APP_ID\"\n                  echo \"FIREBASE_ANDROID_APP_ID=$FIREBASE_ANDROID_APP_ID\" >> tempenv.sh\n                  exit 0\n              else\n                FIREBASE_DISPLAY_NAME=\"izy_tertiaire_cma (android)\"\n              fi\n          else\n            FIREBASE_DISPLAY_NAME=\"$DATA_appDisplayName\"\n          fi\n\n          # l'app android existe, let's fetch son id\n          FIREBASE_ANDROID_APP_ID=$(firebase apps:list android --project $FIREBASE_PROJECT_NAME | grep \"$FIREBASE_DISPLAY_NAME\" | grep -o '1:[^ ]*')\n          if [[ -z $FIREBASE_ANDROID_APP_ID ]]; then\n              echo \"Error retrieving Android app ID from Firebase project: $FIREBASE_PROJECT_NAME\"\n              exit 1\n          fi\n\n          echo \"Android app already exists in Firebase project: $FIREBASE_PROJECT_NAME\"\n          echo \"Firebase Android App ID: $FIREBASE_ANDROID_APP_ID\"\n          echo \"FIREBASE_ANDROID_APP_ID=$FIREBASE_ANDROID_APP_ID\" >> tempenv.sh\n\n      - name: Obtain google-services.json\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n          \n          # Télécharger le fichier google-services.json\n          OUTPUT=$(firebase apps:sdkconfig android $FIREBASE_ANDROID_APP_ID --project $FIREBASE_PROJECT_NAME > android/app/google-services.json)\n          if [[ $? -ne 0 ]]; then\n              echo \"Error downloading google-services.json\"\n              echo \"output: $OUTPUT\"\n              exit 1\n          fi\n\n          echo \"DEBUG::\"\n          cat android/app/google-services.json\n          echo \"::DEBUGGED\"\n\n          # Vérifier si le fichier JSON est valide\n          if ! jq empty android/app/google-services.json >/dev/null 2>&1; then\n              echo \"google-services.json is malformed.\"\n              exit 1\n          fi\n          \n          echo \"google-services.json downloaded and saved to android/app/google-services.json\"\n          sed -i.bak '/./,$!d' android/app/google-services.json\n\n      - *enable_flutterfire\n\n      - *generate_firebase_options\n\n      - *generate_env_file\n\n      - *move_images_assets\n\n      - *clean_up\n\n      - *build_launcher_icons\n\n      - *install_flutter_dependencies\n\n      - name: Create a snapshot of the repo\n        script: |\n          mkdir -p $CM_BUILD_DIR/snapshots\n          zip -r $CM_BUILD_DIR/snapshots/repo_snapshot.zip $CM_BUILD_DIR\n\n      - name: Build Android\n        script: |\n          #!/bin/bash\n          \n          source tempenv.sh\n\n          flutter build appbundle --release \\\n          --build-name=$PUBSPEC_VERSION \\\n          --build-number=$PUBSPEC_BUILD_NUMBER \\\n          --verbose\n\n    artifacts:\n      - build/**/app-release.aab\n      - $CM_BUILD_DIR/snapshots/repo_snapshot.zip\n      - build/app/outputs/logs/**\n    \n    publishing:\n      google_play:\n        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS\n        track: production\n        submit_as_draft: false\n\n  build_ios:\n    name: Triggered iOS Build\n    instance_type: mac_mini_m2\n\n    inputs:\n      bundleIdentifier:\n        description: \"Le bundle identifier de l'application\"\n\n    environment:\n      groups:\n        - izydesk\n        - izydesk_ios\n\n      ios_signing:\n        distribution_type: app_store\n        bundle_identifier: \"${{ inputs.bundleIdentifier }}\"\n\n      xcode: 16.2\n      flutter: 3.27.3\n\n    scripts:\n      - name: Set platform in tempenv\n        script: echo \"PLATFORM=ios\" >> tempenv.sh\n\n      - name: Apple App Store Version comparaison\n        script: |\n          # AASTORE_VERSION=$()\n          AASTORE_BUILD_NUMBER=$(app-store-connect get-latest-app-store-build-number $DATA_appStoreId)\n          echo \"AASTORE_BUILD_NUMBER = $AASTORE_BUILD_NUMBER\"\n\n          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f 1)\n          PUBSPEC_BUILD_NUMBER=$(grep '^version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f 2)\n\n          if [[ $PUBSPEC_BUILD_NUMBER == $AASTORE_BUILD_NUMBER ]]; then\n              echo \"The version and build number in pubspec.yaml are the same as the latest on Apple App Store.\"\n              echo \"No need to build and release.\"\n              exit 1\n          elif [[ $PUBSPEC_BUILD_NUMBER < $AASTORE_BUILD_NUMBER ]]; then\n              echo \"The build number in pubspec.yaml is less than the latest on Apple App Store.\"\n              echo \"Cannot release an older build. Canceling the process.\"\n              exit 1\n          fi\n\n          echo \"PUBSPEC_VERSION=$PUBSPEC_VERSION\" >> tempenv.sh\n          echo \"PUBSPEC_BUILD_NUMBER=$PUBSPEC_BUILD_NUMBER\" >> tempenv.sh\n          \n          \n          echo \"The build number in pubspec.yaml is greater than the latest on Apple App Store.\"\n          echo \"Proceeding with configuration, build and deployment process.\"\n\n      - *flutter_doctor\n\n      - *firebase_install\n\n      - *firebase_auth\n\n      - name: Replace iOS bundle identifier\n        script: |\n          #!/bin/bash\n          \n          # Remplacer le nom de bundle iOS dans le fichier Info.plist\n          # packageName == fr.izydesk.xxxxx\n\n          # Récupérer le nom de bundle iOS\n          BUNDLE_NAME=$(perl -nle 'print $1 if /PRODUCT_BUNDLE_IDENTIFIER\\s*=\\s*(.*?);/' \"ios/Runner.xcodeproj/project.pbxproj\")\n          # echo \"Current bundle name: $BUNDLE_NAME\"\n\n          # Remplacer le nom de bundle iOS\n          perl -pi.bak -e 's/(PRODUCT_BUNDLE_IDENTIFIER\\s*=\\s*).*?;/\\1\"'\"$DATA_packageName\"'\";/g' \"ios/Runner.xcodeproj/project.pbxproj\"\n          if [[ $? -ne 0 ]]; then\n            echo \"Error editing IOS bundle identifier\"\n            exit 1\n          fi\n          echo \"Bundle name replaced with $DATA_packageName\"\n\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$DATA_packageName\" ios/Runner.xcodeproj/project.pbxproj\n          echo \":DEBUGGED\"\n\n      - name: Replace iOS bundle name\n        script: |\n          #!/bin/bash\n          \n          # Remplacer le nom d'affichage de l'application iOS dans le fichier Info.plist\n          # appBundleName == \"easy_eat\"\n\n          # Récupérer le nom d'affichage de l'application iOS\n          if [[ $(uname) == \"Darwin\" ]]; then\n            APP_DISPLAY_NAME=$(/usr/libexec/PlistBuddy -c \"Print :CFBundleName\" \"ios/Runner/Info.plist\")\n          else\n            APP_DISPLAY_NAME=$(grep -oP '<key>CFBundleName</key>\\s*<string>\\K[^<]+' ios/Runner/Info.plist)\n          fi\n\n          echo \"Current app display name: $APP_DISPLAY_NAME\"\n\n          # Remplacer le nom d'affichage de l'application iOS\n          if [[ $(uname) == \"Darwin\" ]]; then\n              /usr/libexec/PlistBuddy -c \"Set :CFBundleName $IOS_APP_BUNDLE_NAME\" \"ios/Runner/Info.plist\"\n          else\n              sed -i \"s/$APP_DISPLAY_NAME/$IOS_APP_BUNDLE_NAME/g\" ios/Runner/Info.plist\n          fi\n          \n          if [[ $? -ne 0 ]]; then\n            echo \"Error editing IOS bundle name\"\n            exit 1\n          fi\n          echo \"App bundle name replaced with $IOS_APP_BUNDLE_NAME\"\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$IOS_APP_BUNDLE_NAME\" ios/Runner/Info.plist\n          echo \":DEBUGGED\"\n\n      - name: Replace iOS display name\n        script: |\n          #!/bin/bash\n          \n          # Remplacer le nom d'affichage de l'application iOS dans le fichier Info.plist\n          # appDisplayName == \"Izydesk\"\n\n          # Récupérer le nom d'affichage de l'application iOS\n          if [[ $(uname) == \"Darwin\" ]]; then\n            APP_DISPLAY_NAME=$(/usr/libexec/PlistBuddy -c \"Print :CFBundleDisplayName\" \"ios/Runner/Info.plist\")\n          else\n            APP_DISPLAY_NAME=$(grep -oP '<key>CFBundleDisplayName</key>\\s*<string>\\K[^<]+' ios/Runner/Info.plist)\n          fi\n\n          # echo \"Current app display name: $APP_DISPLAY_NAME\"\n\n          # Remplacer le nom d'affichage de l'application iOS\n          if [[ $(uname) == \"Darwin\" ]]; then\n              /usr/libexec/PlistBuddy -c \"Set :CFBundleDisplayName $DATA_appDisplayName\" \"ios/Runner/Info.plist\"\n          else\n              sed -i \"s/$APP_DISPLAY_NAME/$DATA_appDisplayName/g\" ios/Runner/Info.plist\n          fi\n          \n          if [[ $? -ne 0 ]]; then\n            echo \"Error editing IOS bundle display name\"\n            exit 1\n          fi\n          echo \"App display name replaced with $DATA_appDisplayName\"\n\n          echo \"DEBUG:\"\n          grep -C 1 -e \"$DATA_appDisplayName\" ios/Runner/Info.plist\n          echo \":DEBUGGED\"\n\n      - *firebase_project_creation\n\n      - *firebase_messaging_setup\n\n      - name: Add iOS app to Firebase project\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n\n          # Vérifier si l'app iOS existe\n          APP_EXISTS=$(firebase apps:list ios --project $FIREBASE_PROJECT_NAME | grep -c \"$DATA_appDisplayName\")\n          if [[ $APP_EXISTS -eq 0 ]]; then\n            APP_EXISTS=$(firebase apps:list ios --project $FIREBASE_PROJECT_NAME | grep -c \"izy_customer_mobile_app\")\n            if [[ $APP_EXISTS -eq 0 ]]; then\n              # Ajouter une application iOS au projet Firebase\n              RESULT=$(firebase apps:create ios \"$DATA_appDisplayName\" --bundle-id $DATA_packageName --app-store-id $DATA_appStoreId \\\n                --project $FIREBASE_PROJECT_NAME)\n              SUCCESS=$(echo $RESULT | grep -i -c \"Your Firebase IOS App is ready!\")\n              if [[ $SUCCESS -ne 1 ]]; then\n                  echo \"Error adding iOS app to Firebase project: $FIREBASE_PROJECT_NAME\"\n                  echo \"output: $RESULT\"\n                  exit 1\n              fi\n              FIREBASE_IOS_APP_ID=$(echo $RESULT | awk -F 'App ID: ' '/App ID:/ {print $2}' | awk '{print $1}')\n              echo \"iOS app added to Firebase project: $FIREBASE_PROJECT_NAME\"\n              echo \"Firebase iOS App ID: $FIREBASE_IOS_APP_ID\"\n            fi\n          else\n              FIREBASE_IOS_APP_ID=$(firebase apps:list ios --project $FIREBASE_PROJECT_NAME | grep \"$DATA_appDisplayName\" | grep -o '1:[^ ]*')\n              if [[ -z $FIREBASE_IOS_APP_ID ]]; then\n                  echo \"Error retrieving iOS app ID from Firebase project: $FIREBASE_PROJECT_NAME\"\n                  exit 1\n              fi\n\n              echo \"iOS app already exists in Firebase project: $FIREBASE_PROJECT_NAME\"\n              echo \"Firebase iOS App ID: $FIREBASE_IOS_APP_ID\"\n          fi\n\n          echo \"FIREBASE_IOS_APP_ID=$FIREBASE_IOS_APP_ID\" >> tempenv.sh\n\n      - name: Obtain GoogleService-Info.plist\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n          \n          # Télécharger le fichier GoogleService-Info.plist\n          OUTPUT=$(firebase apps:sdkconfig ios $FIREBASE_IOS_APP_ID --project $FIREBASE_PROJECT_NAME > ios/Runner/GoogleService-Info.plist)\n          if [[ $? -ne 0 ]]; then\n              echo \"Error downloading GoogleService-Info.plist\"\n              echo \"output: $OUTPUT\"\n              exit 1\n          fi\n          echo \"GoogleService-Info.plist downloaded and saved to ios/Runner/GoogleService-Info.plist\"\n\n          # Retire les potentielles lignes vides au début du fichier\n          sed -i.bak '/./,$!d' ios/Runner/GoogleService-Info.plist\n\n          echo \"ios/Runner/GoogleService-Info.plist fileContent\"\n          echo \"---\"\n          echo \"$(<ios/Runner/GoogleService-Info.plist)\"\n          echo \"---\"\n\n      - *enable_flutterfire\n\n      - *generate_firebase_options\n\n      - *generate_env_file\n\n      - *move_images_assets\n\n      - *clean_up\n\n      - *build_launcher_icons\n\n      - *install_flutter_dependencies\n\n      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command\n        script: keychain initialize\n\n      - name: Fetch signing files\n        script: |\n          #!/bin/bash\n\n          app-store-connect fetch-signing-files \"$DATA_packageName\" \\\n            --type IOS_APP_STORE \\\n            --create\n\n          echo \"Save provisioning profile name\"\n\n          # Liste des fichiers .mobileprovision\n          PROVISIONING_PROFILE_PATHS=$(find \"/Users/builder/Library/MobileDevice/Provisioning Profiles/\" -name \"*.mobileprovision\" -print0)\n          if [ -z \"$PROVISIONING_PROFILE_PATHS\" ]; then\n              echo \"Aucun fichier .mobileprovision trouvé.\"\n              exit 1\n          fi\n\n          echo \"PPP: $PROVISIONING_PROFILE_PATHS\"\n\n          # Initialisation de la variable pour stocker le nom du profil de provisionnement\n          PROVISIONING_PROFILE_NAME=\"\"\n\n          # Itérer sur les fichiers .mobileprovision\n          while IFS= read -r -d '' PROFILE_PATH; do\n              echo \"Vérification du fichier : $PROFILE_PATH\"\n\n              # crée un temporaire\n              TMP_PLIST=$(mktemp)    # crée /var/folders/.../tmp.XXXXXX\n              TMP_PLIST=\"${TMP_PLIST}.plist\"\n              \n              # décode le .mobileprovision en XML\n              security cms -D -i \"$PROFILE_PATH\" > \"$TMP_PLIST\" 2>/dev/null\n              if [ $? -ne 0 ]; then\n              echo \"Erreur de décodage du profil $PROFILE_PATH\"\n              rm -f \"$TMP_PLIST\"\n              continue\n              fi\n              \n              # récupère ensuite le Name\n              CURRENT_PROFILE_NAME=$(/usr/libexec/PlistBuddy -c \"Print :Name\" \"$TMP_PLIST\")\n          \n              if [ -z \"$CURRENT_PROFILE_NAME\" ]; then\n                  echo \"Aucun nom de profil de provisionnement trouvé dans le fichier $PROFILE_PATH.\"\n                  continue\n              fi\n\n              # Convertir le nom du profil en minuscules pour comparaison insensible à la casse\n              CURRENT_PROFILE_NAME_LOWER=$(echo \"$CURRENT_PROFILE_NAME\" | tr '[:upper:]' '[:lower:]')\n              SEARCH_TERM=\"wildcard\"\n              SEARCH_TERM_LOWER=$(echo \"$SEARCH_TERM\" | tr '[:upper:]' '[:lower:]')\n\n              APP_NAME=\"$DATA_saasCompanyName ios_app_store\"\n              APP_NAME_LOWER=$(echo \"$APP_NAME\" | tr '[:upper:]' '[:lower:]')\n\n              echo \"PPN actuel: $CURRENT_PROFILE_NAME\"\n\n              # Vérifiez si le nom du profil ne contient pas le mot \"wildcard\" (insensible à la casse)\n              if [[ \"$CURRENT_PROFILE_NAME_LOWER\" != *\"$SEARCH_TERM_LOWER\"* ]]; then\n                  # Vérifiez si le nom du profil contient bien le bon nom de package (exact)\n                  if [[ \"$CURRENT_PROFILE_NAME_LOWER\" == *\"$APP_NAME_LOWER\"* ]]; then\n                      PROVISIONING_PROFILE_NAME=\"$CURRENT_PROFILE_NAME\"\n                      PROVISIONING_PROFILE_PATH=\"$PROFILE_PATH\"\n                      echo \"Profil trouvé sans 'wildcard', et avec le bon nom d'app '$APP_NAME': $PROVISIONING_PROFILE_NAME\"\n                      break\n                  else\n                      echo \"Le profil $CURRENT_PROFILE_NAME ne correspond pas au bon nom d'app ($APP_NAME), vérification du prochain profil...\"\n                  fi\n              else\n                  echo \"Le profil $CURRENT_PROFILE_NAME contient 'wildcard', vérification du prochain profil...\"\n              fi\n          done < <(find \"/Users/builder/Library/MobileDevice/Provisioning Profiles/\" -name \"*.mobileprovision\" -print0)\n\n          if [ -z \"$PROVISIONING_PROFILE_NAME\" ]; then\n              echo \"Aucun profil de provisionnement sans 'wildcard' trouvé. (name)\"\n              exit 1\n          fi\n          if [ -z \"$PROVISIONING_PROFILE_PATH\" ]; then\n              echo \"Aucun profil de provisionnement sans 'wildcard' trouvé. (path)\"\n              exit 1\n          fi\n\n          echo \"PROVISIONING_PROFILE_NAME=\\\"$PROVISIONING_PROFILE_NAME\\\"\" >> tempenv.sh\n          echo \"PROVISIONING_PROFILE_PATH=\\\"$PROVISIONING_PROFILE_PATH\\\"\" >> tempenv.sh\n\n      - name: Set up signing certificate\n        script: keychain add-certificates\n\n      - name: Set up code signing settings on Xcode project\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n\n          xcode-project use-profiles\n          # --profile $PROVISIONING_PROFILE_PATH\n\n      - name: Pod update\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n\n          pod repo update\n          if [[ $? -ne 0 ]]; then\n              echo \"Error updating CocoaPods repository\"\n              exit 1\n          fi\n\n          cd ios\n          if [[ $? -ne 0 ]]; then\n              echo \"Error changing directory to ios\"\n              exit 1\n          fi\n\n          pod update\n          if [[ $? -ne 0 ]]; then\n              echo \"Error updating CocoaPods dependencies\"\n              exit 1\n          fi\n\n          cd ..\n          if [[ $? -ne 0 ]]; then\n              echo \"Error changing directory back to project root\"\n              exit 1\n          fi\n\n\n      #- name: XCode Build\n      #  script: |\n      #    xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release -archivePath $CM_BUILD_DIR/Runner.xcarchive archive\n\n      - name: Generate exportOptions file\n        script: |\n          #!/bin/bash\n\n          source tempenv.sh\n          echo \"PPN SOURCED: $PROVISIONING_PROFILE_NAME\"\n          \n          # Échappe les caractères XML spéciaux dans le nom du provisioning profile\n          escaped_provisioning_profile_name=$(printf '%s' \"$PROVISIONING_PROFILE_NAME\" \\\n          | sed -e 's/&/\\&amp;/g' \\\n          -e 's/</\\&lt;/g' \\\n          -e 's/>/\\&gt;/g' \\\n          -e \"s/'/\\&apos;/g\" \\\n          -e 's/\\\"/\\&quot;/g')\n\n          cat > exportOptions.plist <<EOF\n          <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n          <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n          <plist version=\"1.0\">\n          <dict>\n              <key>method</key>\n              <string>$APP_STORE_CONNECt_DEPLOY_METHOD</string>\n              <key>teamID</key>\n              <string>$APP_STORE_CONNECT_TEAM_ID</string>\n              <key>uploadBitcode</key>\n              <false/>\n              <key>compileBitcode</key>\n              <true/>\n              <key>uploadSymbols</key>\n              <true/>\n              <key>provisioningProfiles</key>\n              <dict>\n                  <key>$DATA_packageName</key>\n                  <string>$escaped_provisioning_profile_name</string>\n              </dict>\n          </dict>\n          </plist>\n          EOF\n          if [[ $? -ne 0 ]]; then\n              echo \"Error creating exportOptions.plist\"\n              exit 1\n          fi\n\n          # Retire les potentielles lignes vides\n          sed -i.bak '/./,$!d' exportOptions.plist\n\n          # \n          echo \"ORIGINAL EXPROT OPTIONS PLIST\"\n          cat /Users/builder/export_options.plist\n          echo \"OK?\"\n\n          cp exportOptions.plist /Users/builder/export_options.plist\n          \n          echo \"OUR EXPORT OPTIONS PLIST\"\n          cat exportOptions.plist\n          echo \"OK?\"\n\n      #- name: XCode IPA Export\n      #  script: |\n      #    #!/bin/bash\n\n      #    xcodebuild -exportArchive -archivePath $CM_BUILD_DIR/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath $CM_BUILD_DIR\n      #    if [[ $? -ne 0 ]]; then\n      #        echo \"Error exporting IPA\"\n      #        exit 1\n      #    fi\n\n      - name: Create a snapshot of the repo\n        script: |\n          mkdir -p $CM_BUILD_DIR/snapshots\n          zip -r $CM_BUILD_DIR/snapshots/repo_snapshot.zip $CM_BUILD_DIR\n\n      - name: Flutter build ios\n        script: flutter build ios --release\n\n      - name: Flutter build IPA\n        script: flutter build ipa --release --export-options-plist=exportOptions.plist\n\n    artifacts:\n      - $CM_BUILD_DIR/**/*.ipa\n      - build/**/*.ipa\n      - $CM_BUILD_DIR/snapshots/repo_snapshot.zip\n\n    integrations:\n      app_store_connect: CodeMagicAPIKey\n\n    publishing:\n      app_store_connect:\n        auth: integration\n        submit_to_app_store: true\n        release_type: AFTER_APPROVAL\n\n  trigger_build:\n    name: Trigger App Build\n    instance_type: linux_x2\n\n    environment:\n      groups:\n        - izydesk\n\n    inputs:\n      applicationIdentifier:\n        description: \"L'identifiant de l'application (fr.izydesk.xxxxx)\"\n\n      buildAndroid:\n        default: true\n        type: boolean\n        description: \"Build Android?\"\n\n      buildIOS:\n        default: true\n        type: boolean\n        description: \"Build iOS ?\"\n\n    scripts:\n      - name: Read izydesk_apps.json and build Android\n        when:\n          condition: ${{ inputs.buildAndroid }}\n        script: |\n          #!/bin/bash\n          \n          # Lire le fichier JSON et extraire la liste des applications\n          APPS=$(jq -c '.apps[]' izydesk_apps.json)\n          \n          if [[ $? -ne 0 ]]; then\n              echo \"Error reading JSON from izydesk_apps.json\"\n              exit 1\n          fi\n\n          # Compter le nombre d'applications\n          APP_COUNT=$(echo \"$APPS\" | wc -l)\n          echo \"Found $APP_COUNT apps in configuration.\"\n\n          # Trouver l'application avec l'identifiant donné\n          app=$(echo \"$APPS\" | jq -c \"select(.packageName == \\\"${{ inputs.applicationIdentifier }}\\\")\")\n\n          # Vérifier si l'application a été trouvée\n          if [[ -z \"$app\" ]]; then\n              echo \"Application with identifier ${{ inputs.applicationIdentifier }} not found in configuration.\"\n              exit 1\n          fi\n\n          echo \"Found app configuration: $app\"\n\n\n          saasCompanyName=$(echo \"$app\" | jq -r '.saasCompanyName')\n          saasCompanyUuid=$(echo \"$app\" | jq -r '.saasCompanyUuid')\n          saasCompanyType=$(echo \"$app\" | jq -r '.saasCompanyType')\n          packageNameAndroid=$(echo \"$app\" | jq -r '.packageName')\n          packageNameIos=$(echo \"$app\" | jq -r '.packageName')\n          appDisplayName=$(echo \"$app\" | jq -r '.appDisplayName')\n          appStoreId=$(echo \"$app\" | jq -r '.appStoreAppId')\n\n          # Vérification si la clé \"overrideIosPackageName\" est présente et non nulle\n          overrideIosPackageName=$(echo \"$app\" | jq -r '.overrideIosPackageName // empty')\n          if [ -n \"$overrideIosPackageName\" ]; then\n              packageNameIos=\"$overrideIosPackageName\"\n          fi\n\n          #~ Check that all required fields are present\n          if [[ -z \"$saasCompanyName\" || -z \"$saasCompanyUuid\" || -z \"$saasCompanyType\" || -z \"$packageNameAndroid\" || -z \"$appDisplayName\" ]]; then\n            echo \"Missing required fields for app $app\"\n            exit 1\n          fi\n\n          echo \"Triggering ANDROID build for $saasCompanyName...\"\n          \n          # Déclencher le workflow Android\n          curl -X POST \"https://api.codemagic.io/builds\" \\\n          -H \"Content-Type: application/json\" \\\n          -H \"x-auth-token: $CM_API_TOKEN\" \\\n          -d '{\n            \"appId\": \"'\"$COD_MAGIC_APP_ID\"'\",\n            \"workflowId\": \"build_android\",\n            \"branch\": \"main\",\n            \"environment\": {\n              \"variables\": {\n                \"DATA_saasCompanyName\": \"'\"$saasCompanyName\"'\",\n                \"DATA_saasCompanyUuid\": \"'\"$saasCompanyUuid\"'\",\n                \"DATA_saasCompanyType\": \"'\"$saasCompanyType\"'\",\n                \"DATA_packageName\": \"'\"$packageNameAndroid\"'\",\n                \"DATA_appDisplayName\": \"'\"$appDisplayName\"'\"\n              }\n            }\n          }'\n\n      - name: Read izydesk_apps.json and build IOS\n        when:\n          condition: ${{ inputs.buildIOS }}\n        script: |\n          #!/bin/bash\n          \n          # Lire le fichier JSON et extraire la liste des applications\n          APPS=$(jq -c '.apps[]' izydesk_apps.json)\n          \n          if [[ $? -ne 0 ]]; then\n              echo \"Error reading JSON from izydesk_apps.json\"\n              exit 1\n          fi\n\n          # Compter le nombre d'applications\n          APP_COUNT=$(echo \"$APPS\" | wc -l)\n          echo \"Found $APP_COUNT apps in configuration.\"\n\n          # Trouver l'application avec l'identifiant donné\n          app=$(echo \"$APPS\" | jq -c \"select(.packageName == \\\"${{ inputs.applicationIdentifier }}\\\")\")\n\n          # Vérifier si l'application a été trouvée\n          if [[ -z \"$app\" ]]; then\n              echo \"Application with identifier ${{ inputs.applicationIdentifier }} not found in configuration.\"\n              exit 1\n          fi\n\n          echo \"Found app configuration: $app\"\n\n\n          saasCompanyName=$(echo \"$app\" | jq -r '.saasCompanyName')\n          saasCompanyUuid=$(echo \"$app\" | jq -r '.saasCompanyUuid')\n          saasCompanyType=$(echo \"$app\" | jq -r '.saasCompanyType')\n          packageNameAndroid=$(echo \"$app\" | jq -r '.packageName')\n          packageNameIos=$(echo \"$app\" | jq -r '.packageName')\n          appDisplayName=$(echo \"$app\" | jq -r '.appDisplayName')\n          appStoreId=$(echo \"$app\" | jq -r '.appStoreAppId')\n\n          # Vérification si la clé \"overrideIosPackageName\" est présente et non nulle\n          overrideIosPackageName=$(echo \"$app\" | jq -r '.overrideIosPackageName // empty')\n          if [ -n \"$overrideIosPackageName\" ]; then\n              packageNameIos=\"$overrideIosPackageName\"\n          fi\n\n          #~ Check that all required fields are present\n          if [[ -z \"$saasCompanyName\" || -z \"$saasCompanyUuid\" || -z \"$saasCompanyType\" || -z \"$packageNameIos\" || -z \"$appStoreId\" || -z \"$appDisplayName\" ]]; then\n            echo \"Missing required fields for app $app\"\n            exit 1\n          fi\n\n          echo \"Triggering iOS build for $saasCompanyName...\"\n\n          # Déclencher le workflow iOS\n          curl --fail --show-error -X POST \"https://api.codemagic.io/builds\" \\\n          -H \"Content-Type: application/json\" \\\n          -H \"x-auth-token: $CM_API_TOKEN\" \\\n          -d '{\n            \"appId\": \"'\"$COD_MAGIC_APP_ID\"'\",\n            \"workflowId\": \"build_ios\",\n            \"branch\": \"main\",\n            \"inputs\": {\n              \"bundleIdentifier\": \"'\"$packageNameIos\"'\"\n            },\n            \"environment\": {\n              \"variables\": {\n                \"DATA_saasCompanyName\": \"'\"$saasCompanyName\"'\",\n                \"DATA_saasCompanyUuid\": \"'\"$saasCompanyUuid\"'\",\n                \"DATA_saasCompanyType\": \"'\"$saasCompanyType\"'\",\n                \"DATA_packageName\": \"'\"$packageNameIos\"'\",\n                \"DATA_appDisplayName\": \"'\"$appDisplayName\"'\",\n                \"DATA_appStoreId\": \"'\"$appStoreId\"'\"\n              }\n            }\n          }'\n"
        }
    ]
}